/**
 * Copyright (c) 2017-present, Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */
#pragma once

#include "logdevice/common/EpochMetaData.h"
#include "logdevice/common/configuration/Configuration.h"

namespace facebook { namespace logdevice {

/**
 * @file this object handles the metadata log writes that are generated by a
 *       Sequencer.
 */

class Sequencer;

class SequencerMetaDataLogManager {
 public:
  explicit SequencerMetaDataLogManager(Sequencer* owner) : owner_(owner) {}

  /**
   * Posts a WriteMetaDataLogRequest if configuration, epoch store contents and
   * current owner sequencer state suggest that sequencer should write a
   * metadata log record.
   */
  void considerWritingMetaDataLogRecord(
      std::shared_ptr<const EpochMetaData> epoch_store_metadata,
      const std::shared_ptr<Configuration>& cfg);

  // If there a WriteMetaDataLogRequest for the last effective_since value is
  // still outstanding, its effective_since will be stored here.
  // Otherwise, it will be EPOCH_INVALID (note that this might mean that
  // requests for older effective_since values could theoretically still be
  // outstanding. But this shouldn't happen in practice). This prevents us from
  // starting duplicate requests for the same effective_since from one sequencer
  std::atomic<uint32_t> last_metadata_log_writer_effective_since_{0};

 private:
  Sequencer* owner_;
};

}} // namespace facebook::logdevice
